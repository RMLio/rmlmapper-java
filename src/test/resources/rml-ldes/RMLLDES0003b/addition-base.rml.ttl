@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ex: <http://example.com/> .
@prefix rdfs: <https://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix idlab-fn: <http://example.com/idlab/function/> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix tree: <https://w3id.org/tree#> .
@prefix ldes: <https://w3id.org/ldes#> .
@prefix formats: <http://www.w3.org/ns/formats/> .
@base <http://example.com/rules/> .

# ActivityStreams as:actor object is always the same
<#PredicateObjectMapASActor>
  a rr:PredicateObjectMap;
  rr:predicate as:actor;
  rr:objectMap [
    rr:constant "http://example.org/myDataset/";
    rr:termType rr:IRI;
  ];
.

# ActivityStreams as:Create
<#TriplesMapASCreate>
  a rr:TriplesMap;

  rml:logicalSource [
    rml:source "base.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$";
  ];

  rr:subjectMap [
    rr:constant "create";
    rr:termType rr:BlankNode;
    rr:class as:Create;
  ];

  rr:predicateObjectMap <#PredicateObjectMapASActor>;
  rr:predicateObjectMap [
    rr:predicate as:object;
    rr:objectMap [ a rr:RefObjectMap;
      rr:parentTriplesMap <#TriplesMapObjectCreate>;
    ];
  ];
.

# ActivityStreams as:Update
<#TriplesMapASUpdate>
  a rr:TriplesMap;

  rml:logicalSource [
    rml:source "base.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$";
  ];

  rr:subjectMap [
    rr:constant "update";
    rr:termType rr:BlankNode;
    rr:class as:Update;
  ];

  rr:predicateObjectMap <#PredicateObjectMapASActor>;
  rr:predicateObjectMap [
    rr:predicate as:object;
    rr:objectMap [ a rr:RefObjectMap;
      rr:parentTriplesMap <#TriplesMapObjectUpdate>;
    ];
  ];
.

# ActivityStreams as:Delete
<#TriplesMapASDelete>
  a rr:TriplesMap;

  rml:logicalSource [
    rml:source "base.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.deletion[*]";
  ];

  rr:subjectMap [
    rr:constant "delete";
    rr:termType rr:BlankNode;
    rr:class as:Delete;
  ];

  rr:predicateObjectMap <#PredicateObjectMapASActor>;
  rr:predicateObjectMap [
    rr:predicate as:object;
    rr:objectMap [
      fnml:functionValue [
        rr:predicateObjectMap [
          rr:predicate fno:executes ;
          rr:objectMap [ rr:constant idlab-fn:explicitDelete ] ] ;
          # IRI template
          rr:predicateObjectMap [
            rr:predicate idlab-fn:iri ;
            rr:objectMap [ rr:template "http://ex.org/sensor/{sensor}/" ]
          ];
          # Properties to watch, can be one or multiple
          # Note that the template does not need to match with these properties!
          rr:predicateObjectMap [
            rr:predicate idlab-fn:watchedProperty ;
            rr:objectMap [ rml:reference "id" ]
          ];
          # Directory path where the state for this function is/will be stored
          rr:predicateObjectMap [
            rr:predicate idlab-fn:state ;
            rr:objectMap [ rr:constant "/tmp/explicit_delete_state"; rr:dataType xsd:string; ]
          ];
       ];
       rr:termType rr:IRI;
    ];
  ];
.

################################################################################

# Created object to publish
<#TriplesMapObjectCreate>
  a rr:TriplesMap;

  rml:logicalSource [
    rml:source "base.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.addition[*]";
  ];

  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:explicitCreate ] ] ;
        # IRI template
        rr:predicateObjectMap [
          rr:predicate idlab-fn:iri ;
          rr:objectMap [ rr:template "http://ex.org/sensor/{sensor}/" ]
        ];
        # Properties to watch, can be one or multiple
        # Note that the template does not need to match with these properties!
        rr:predicateObjectMap [
          rr:predicate idlab-fn:watchedProperty ;
          rr:objectMap [ rml:reference "id" ]
        ];
        # Directory path where the state for this function is/will be stored
        rr:predicateObjectMap [
          rr:predicate idlab-fn:state ;
          rr:objectMap [ rr:constant "/tmp/explicit_create_state"; rr:dataType xsd:string; ]
        ];
     ];
  ];

  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant ex:pressure ];
    rr:objectMap [ rml:reference "pressure" ];
  ];

  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant ex:temperature ];
    rr:objectMap [ rml:reference "temperature" ];
  ];
.

# Updated object to publish
<#TriplesMapObjectUpdate>
  a rr:TriplesMap;

  rml:logicalSource [
    rml:source "base.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.modification[*]";
  ];

  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:explicitUpdate ] ] ;
        # IRI template
        rr:predicateObjectMap [
          rr:predicate idlab-fn:iri ;
          rr:objectMap [ rr:template "http://ex.org/sensor/{sensor}/" ]
        ];
        # Properties to watch, can be one or multiple
        # Note that the template does not need to match with these properties!
        rr:predicateObjectMap [
          rr:predicate idlab-fn:watchedProperty ;
          rr:objectMap [ rml:reference "id" ]
        ];
        # Directory path where the state for this function is/will be stored
        rr:predicateObjectMap [
          rr:predicate idlab-fn:state ;
          rr:objectMap [ rr:constant "/tmp/explicit_change_state"; rr:dataType xsd:string; ]
        ];
     ];
  ];

  rr:predicateObjectMap [
    rr:predicate ex:temperature;
    rr:objectMap [ rml:reference "temperature" ];
  ];

  rr:predicateObjectMap [
    rr:predicate ex:pressure;
    rr:objectMap [ rml:reference "pressure" ];
  ];
.
