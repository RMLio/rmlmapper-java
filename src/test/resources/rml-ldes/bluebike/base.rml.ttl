# 
# RML mapping rules for BlueBike and JCDecaux bike-sharing data
# (c) Dylan Van Assche (2021 - 2023)
# IDLab - Ghent University - imec
#
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ex: <http://example.com/> .
@prefix rdfs: <https://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rmlt: <http://semweb.mmlab.be/ns/rml-target#> .
@prefix comp: <http://semweb.mmlab.be/ns/rml-compression#> .
@prefix formats: <http://www.w3.org/ns/formats/> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix idlab-fn: <https://w3id.org/imec/idlab/function#> .
@prefix grel: <http://users.ugent.be/~bjdmeest/function/grel.ttl#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix tree: <https://w3id.org/tree#> .
@prefix ldes: <https://w3id.org/ldes#> .
@prefix purl: <http://purl.org/dc/terms/> .
@prefix as: <https://www.w3.org/ns/activitystreams#> .
@prefix td: <https://www.w3.org/2019/wot/td#> .
@prefix htv: <http://www.w3.org/2011/http#> .
@prefix hctl: <https://www.w3.org/2019/wot/hypermedia#> .
@prefix gbfs: <https://w3id.org/gbfs#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix schema: <http://schema.org/> .
@prefix mobivoc: <http://schema.mobivoc.org/#> .
@base <http://example.com/rules/> .

# LDES output
<#LDESLogicalTarget> a rmlt:EventStreamTarget;
    rmlt:target [ a void:Dataset;
        void:dataDump <file://./output-base.nq>;
    ];
    rmlt:serialization formats:N-Quads;
    rmlt:ldes [ a ldes:EvenStream;
      ldes:timestampPath dct:created;
      ldes:versionOfPath dct:isVersionOf;
      tree:shape <https://blue-bike.be/shape.ttl>;
    ];
    rmlt:ldesBaseIRI <https://blue-bike.be/ldes.ttl>;
    rmlt:ldesGenerateImmutableIRI "false"^^xsd:boolean;
.

# ActivityStreams as:actor object is always the same
<#PredicateObjectMapASActor>
  a rr:PredicateObjectMap;
  rr:predicate as:actor;
  rr:object <https://blue-bike.be/dataset>;
.

<#DataSource> a rml:LogicalSource;
  rml:source "base.json";
  rml:referenceFormulation ql:JSONPath;
  rml:iterator "$.[*]";
.

################################################################################
# Event log
################################################################################

# ActivityStreams as:Create
<#TriplesMapASCreate> a rr:TriplesMap;
  rml:logicalSource <#DataSource>;

  rr:subjectMap [
    rr:constant "http://blue-bike.be/event/create";
    rr:termType rr:IRI;
    rr:class as:Create;
    rml:logicalTarget <#LDESLogicalTarget>;
  ];

  rr:predicateObjectMap <#PredicateObjectMapASActor>;
.

# ActivityStreams as:Update
<#TriplesMapASUpdate> a rr:TriplesMap;
  rml:logicalSource <#DataSource>;

  rr:subjectMap [
    rr:constant "http://blue-bike.be/event/update";
    rr:termType rr:IRI;
    rr:class as:Update;
    rml:logicalTarget <#LDESLogicalTarget>;
  ];

  rr:predicateObjectMap <#PredicateObjectMapASActor>;
.

# ActivityStreams as:Delete
<#TriplesMapASDelete> a rr:TriplesMap;
  rml:logicalSource <#DataSource>;

  rr:subjectMap [
    rr:constant "http://blue-bike.be/event/delete";
    rr:termType rr:IRI;
    rr:class as:Delete;
    rml:logicalTarget <#LDESLogicalTarget>;
  ];

  rr:predicateObjectMap <#PredicateObjectMapASActor>;
.


################################################################################
# Stations
################################################################################

# BlueBike station properties
<#BlueBikeStationPropertyName> a rr:PredicateObjectMap;
  rr:predicate schema:name; 
  rr:objectMap [ rml:reference "name"; rr:datatype xsd:string; ];
.

<#BlueBikeStationPropertyID> a rr:PredicateObjectMap;
  rr:predicate gbfs:station_id;
  rr:objectMap [ rml:reference "id"; rr:datatype xsd:string; ];
.

  # BlueBike station: available bicycles
<#BlueBikeStationPropertyAvailableBikes> a rr:PredicateObjectMap;
  rr:predicate gbfs:num_bikes_available; 
  rr:objectMap [ rml:reference "bikes_available"; rr:datatype xsd:integer; ];
.

<#BlueBikeStationPropertyLatitude> a rr:PredicateObjectMap;
  rr:predicate geo:latitude ; 
  rr:objectMap [ rml:reference "latitude"; rr:datatype xsd:float; ]
.

<#BlueBikeStationPropertyLongitude> a rr:PredicateObjectMap;
  rr:predicate geo:longitude ; 
  rr:objectMap [ rml:reference "longitude"; rr:datatype xsd:float; ]
.

<#BlueBikeStationPropertyCreated> a rr:PredicateObjectMap;
  rr:predicate dct:created ;
  rr:objectMap [ rml:reference "last_seen"; rr:datatype xsd:dateTime; ]
.

################################################################################

<#TriplesMapObjectCreate> a rr:TriplesMap;
  rml:logicalSource <#DataSource>;

  # BlueBike advertises added stations explicitely by giving them a new unique
  # ID. New IDs imply an explicit create operation.
  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:explicitCreate ]
      ] ;
      # IRI template
      rr:predicateObjectMap [
        rr:predicate idlab-fn:iri ;
        rr:objectMap [ rr:template "https://blue-bike.be/stations/{id}" ]
      ];
      # Directory path where the state for this function is/will be stored
      rr:predicateObjectMap [
        rr:predicate idlab-fn:state ;
        rr:objectMap [
          rr:constant "/tmp/create_state";
          rr:dataType xsd:string;
        ];
      ];
    ];
    rr:class mobivoc:BicycleParkingStation;
    rr:graph <http://blue-bike.be/event/create>;
    rml:logicalTarget <#LDESLogicalTarget>;
  ];

  rr:predicateObjectMap <#BlueBikeStationPropertyName>;
  rr:predicateObjectMap <#BlueBikeStationPropertyID>;
  rr:predicateObjectMap <#BlueBikeStationPropertyAvailableBikes>;
  rr:predicateObjectMap <#BlueBikeStationPropertyMaximumCapacity>;
  rr:predicateObjectMap <#BlueBikeStationPropertyLatitude>;
  rr:predicateObjectMap <#BlueBikeStationPropertyLongitude>;
  rr:predicateObjectMap <#BlueBikeStationPropertyCreated>;
.

################################################################################

<#TriplesMapObjectUpdate> a rr:TriplesMap;
  rml:logicalSource <#DataSource>;

  # BlueBike advertises explicitely changes with a last_seen timestamp,
  # but does not specify which type of change, thus implicitely.
  # However, this timestamp is not provided consistenly, thus also watch
  # available bikes
  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:implicitUpdate ]
      ] ;
      # IRI template
      rr:predicateObjectMap [
        rr:predicate idlab-fn:iri ;
        rr:objectMap [ rr:template "https://blue-bike.be/stations/{id}" ]
      ];
      # Properties to watch, can be one or multiple
      # Note that the template does not need to match with these properties!
      rr:predicateObjectMap [
        rr:predicate idlab-fn:watchedProperty ;
        rr:objectMap [ rr:template "name={name}&lat={latitude}&lon={longitude}&bikes={bikes_available}" ]
      ];
      # Directory path where the state for this function is/will be stored
      rr:predicateObjectMap [
        rr:predicate idlab-fn:state ;
        rr:objectMap [ rr:constant "/tmp/change_state"; rr:dataType xsd:string; ]
      ];
    ];
    rr:class mobivoc:BicycleParkingStation;
    rr:graph <http://blue-bike.be/event/update>;
    rml:logicalTarget <#LDESLogicalTarget>;
  ];

  rr:predicateObjectMap <#BlueBikeStationPropertyName>;
  rr:predicateObjectMap <#BlueBikeStationPropertyID>;
  rr:predicateObjectMap <#BlueBikeStationPropertyAvailableBikes>;
  rr:predicateObjectMap <#BlueBikeStationPropertyMaximumCapacity>;
  rr:predicateObjectMap <#BlueBikeStationPropertyLatitude>;
  rr:predicateObjectMap <#BlueBikeStationPropertyLongitude>;
  rr:predicateObjectMap <#BlueBikeStationPropertyCreated>;
.

################################################################################

# ActivityStreams as:Delete
<#TriplesMapObjectDelete> a rr:TriplesMap;
  rml:logicalSource <#DataSource>;

  rr:subjectMap [
    fnml:functionValue [
      rr:predicateObjectMap [
        rr:predicate fno:executes ;
        rr:objectMap [ rr:constant idlab-fn:implicitDelete ] ] ;
        # IRI template
        rr:predicateObjectMap [
          rr:predicate idlab-fn:iri ;
          rr:objectMap [ rr:template "https://blue-bike.be/stations/{id}" ]
        ];
        # Directory path where the state for this function is/will be stored
        rr:predicateObjectMap [
          rr:predicate idlab-fn:state ;
          rr:objectMap [ rr:constant "/tmp/delete_state"; rr:dataType xsd:string; ]
        ];
    ];
    rr:termType rr:IRI;
    rr:class mobivoc:BicycleParkingStation;
    rr:graph <http://blue-bike.be/event/delete>;
    rml:logicalTarget <#LDESLogicalTarget>;
  ];
.
