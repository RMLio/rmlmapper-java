@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#>.
@prefix fno: <https://w3id.org/function/ontology#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix : <http://mapping.example.com/>.
@prefix idlab-fn: <https://w3id.org/imec/idlab/function#>.
@prefix grel: <http://users.ugent.be/~bjdmeest/function/grel.ttl#>.

:map_testcase rml:logicalSource :source.
:source a rml:LogicalSource;
    rml:source "onderwijsniveaus.csv";
    rml:referenceFormulation ql:CSV.
:map_testcase a rr:TriplesMap;
    rdfs:label "testcase".
:s a rr:SubjectMap.
:map_testcase rr:subjectMap :s.
:s a fnml:FunctionTermMap;
    rr:termType rr:BlankNode;
    fnml:functionValue :fn_condition.

# condition
:fn_condition rml:logicalSource :source;
    rr:predicateObjectMap :pomexec_condition.
:pomexec_condition rr:predicateMap :pmexec_condition.
:pmexec_condition rr:constant fno:executes.

:pomexec_condition rr:objectMap :omexec_condition.
:omexec_condition rr:constant idlab-fn:trueCondition;
    rr:termType rr:IRI.

:fn_condition rr:predicateObjectMap :pom_condition.
:pom_condition a rr:PredicateObjectMap;
    rr:predicateMap :pm_condition.
:pm_condition a rr:PredicateMap;
    rr:constant idlab-fn:strBoolean.

:pom_condition rr:objectMap :om_condition.
:om_condition a rr:ObjectMap, fnml:FunctionTermMap;
    fnml:functionValue :fn_bool_and.

# function: grel:boolean_and
:fn_bool_and rml:logicalSource :source;
    rr:predicateObjectMap :pomexec_and.
:pomexec_and rr:predicateMap :pmexec_and.
:pmexec_and rr:constant fno:executes.

:pomexec_and rr:objectMap :omexec_and.
:omexec_and rr:constant grel:boolean_and;
    rr:termType rr:IRI.

# First parameter for boolean_and : Slug1 idlab-fn:equal to _scheme
:fn_bool_and rr:predicateObjectMap :pom_and_1.
:pom_and_1 a rr:PredicateObjectMap;
    rr:predicateMap :pm_and_1.
:pm_and_1 a rr:PredicateMap;
    rr:constant grel:param_rep_b.

:pom_and_1 rr:objectMap :om_and_1.
:om_and_1 a rr:ObjectMap, fnml:FunctionTermMap;
    rr:datatype xsd:boolean;
    fnml:functionValue :fn_eq_par1.

# idlab-fn:equal
:fn_eq_par1 rml:logicalSource :source;
    rr:predicateObjectMap :pomexec_eq_par1.
:pomexec_eq_par1 rr:predicateMap :pmexec_eq_par1.
:pmexec_eq_par1 rr:constant fno:executes.

:pomexec_eq_par1 rr:objectMap :omexec_eq_par1.
:omexec_eq_par1 rr:constant idlab-fn:equal;
    rr:termType rr:IRI.

# idlab-fn:equal valueParamter
:fn_eq_par1 rr:predicateObjectMap :pom_eq_par1_par1.
:pom_eq_par1_par1 a rr:PredicateObjectMap;
    rr:predicateMap :pm_eq_par1_par1.
:pm_eq_par1_par1 a rr:PredicateMap;
    rr:constant grel:valueParameter.
:pom_eq_par1_par1 rr:objectMap :om_eq_par1_par1.
:om_eq_par1_par1 a rr:ObjectMap;
    rml:reference "Slug1";
    rr:termType rr:Literal.

# idlab-fn:equal valueParameter2
:fn_eq_par1 rr:predicateObjectMap :pom_eq_par1_par2.
:pom_eq_par1_par2 a rr:PredicateObjectMap;
    rr:predicateMap :pm_eq_par1_par2.
:pm_eq_par1_par2 a rr:PredicateMap;
    rr:constant grel:valueParameter2.
:pom_eq_par1_par2 rr:objectMap :om_eq_par1_par2.
:om_eq_par1_par2 a rr:ObjectMap;
    rr:constant "_scheme";
    rr:termType rr:Literal.

# Second parameter for boolean_and : Slug1 idlab-fn:equal to _scheme
:fn_bool_and rr:predicateObjectMap :pom_and_2.
:pom_and_2 a rr:PredicateObjectMap;
    rr:predicateMap :pm_and_2.
:pm_and_2 a rr:PredicateMap;
    rr:constant grel:param_rep_b.

:pom_and_2 rr:objectMap :om_and_2.
:om_and_2 a rr:ObjectMap, fnml:FunctionTermMap;
    rr:datatype xsd:boolean;
    fnml:functionValue :fn_eq_par2.

# idlab-fn:equal
:fn_eq_par2 rml:logicalSource :source;
    rr:predicateObjectMap :pomexec_eq_par2.
:pomexec_eq_par2 rr:predicateMap :pmexec_eq_par2.
:pmexec_eq_par2 rr:constant fno:executes.
:pomexec_eq_par2 rr:objectMap :omexec_eq_par2.

:omexec_eq_par2 rr:constant idlab-fn:equal;
    rr:termType rr:IRI.

:fn_eq_par2 rr:predicateObjectMap :pom_eq_par2_par1.

# idlab-fn:equal valueParamter
:pom_eq_par2_par1 a rr:PredicateObjectMap;
    rr:predicateMap :pm_eq_par2_par1.
:pm_eq_par2_par1 a rr:PredicateMap;
    rr:constant grel:valueParameter.
:pom_eq_par2_par1 rr:objectMap :om_eq_par2_par1.
:om_eq_par2_par1 a rr:ObjectMap;
    rml:reference "Slug1";
    rr:termType rr:Literal.

# idlab-fn:equal valueParameter2
:fn_eq_par2 rr:predicateObjectMap :pom_eq_par2_par2.
:pom_eq_par2_par2 a rr:PredicateObjectMap;
    rr:predicateMap :pm_eq_par2_par2.
:pm_eq_par2_par2 a rr:PredicateMap;
    rr:constant grel:valueParameter2.
:pom_eq_par2_par2 rr:objectMap :om_eq_par2_par2.
:om_eq_par2_par2 a rr:ObjectMap;
    rr:constant "_scheme";
    rr:termType rr:Literal.

:fn_condition rr:predicateObjectMap :pom_blank.
:pom_blank a rr:PredicateObjectMap;
    rr:predicateMap :pm_blank.
:pm_blank a rr:PredicateMap;
    rr:constant idlab-fn:str.
:pom_blank rr:objectMap :om_blank.
:om_blank a rr:ObjectMap;
    rr:termType rr:BlankNode.

# po: [a, skos:ConceptScheme]
:pom_0 a rr:PredicateObjectMap.
:map_testcase rr:predicateObjectMap :pom_0.
:pm_0 a rr:PredicateMap.
:pom_0 rr:predicateMap :pm_0.
:pm_0 rr:constant rdf:type.

:pom_0 rr:objectMap :om_0.
:om_0 a rr:ObjectMap;
    rr:constant skos:ConceptScheme;
    rr:termType rr:IRI.

# po: [skos:prefLabel, "test2", nl~lang]
:pom_1 a rr:PredicateObjectMap.
:map_testcase rr:predicateObjectMap :pom_1.
:pm_1 a rr:PredicateMap.
:pom_1 rr:predicateMap :pm_1.
:pm_1  rr:constant skos:prefLabel.

:pom_1 rr:objectMap :om_1.
:om_1 a rr:ObjectMap;
    rr:constant "test2";
    rr:termType rr:Literal;
    rr:language "nl".