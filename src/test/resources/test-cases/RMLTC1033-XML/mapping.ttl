@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix ex: <http://example.com/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rml:    <http://semweb.mmlab.be/ns/rml#> .
@prefix ql:     <http://semweb.mmlab.be/ns/ql#> .

@base <http://example.com/base/> .

## 
# Test mapping for some XPath 2.0 expressions and functions (https://www.w3.org/TR/xpath20/):
# - lower-case()
# - upper-case()
# - string-join()
# - for expression
# - if-then-else conditional expression
##

<TriplesMapStudent>
  a rr:TriplesMap;
  rml:logicalSource [
    rml:source "data.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "/myNS:students/myNS:student[Address]"
  ];
    
    rr:subjectMap [ rml:reference "Name"; rr:termType rr:IRI; ];
    
    rr:predicateObjectMap [
    	rr:predicate rdfs:label;
    	rr:objectMap [ rml:reference "lower-case(Name)" ]
    ], [
        rr:predicate ex:city;
        rr:objectMap [ rml:reference "upper-case(Address/City)" ]
    ], [
        rr:predicate ex:fullAddress;
        rr:objectMap [ # compile full address with format "${street} ${number}, ${city}" 
            rml:reference "string-join(for $n in Address/* return (if (name($n) = 'City') then string-join((', ', $n)) else string-join((' ', $n))), '')" 
        ]
    ].
